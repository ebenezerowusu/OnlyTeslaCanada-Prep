@import './components/organisms/grid';

@mixin background-gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation == 'vertical' {
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: linear-gradient($orientation, $start-color, $end-color);
  }
}

$grid-breakpoints: (
  phone: $screen-phone,
  tabletPortrait: $screen-tablet-portrait,
  tabletLandscape: $screen-tablet-landscape,
  smallDesktop: $screen-small-desktop,
  largeDesktop: $screen-large-desktop,
);
@mixin mediaMin($breakpoint-name) {
  @if map-has-key($grid-breakpoints, $breakpoint-name) {
    @media (min-width: #{map_get($grid-breakpoints, $breakpoint-name)}) {
      @content;
    }
  } @else {
    @error "breakpoint not supported!";
  }
}

$grid-breakpoints-max: (
  phone: $screen-phone-max,
  tabletPortrait: $screen-tablet-portrait-max,
  tabletLandscape: $screen-tablet-landscape-max,
  smallDesktop: $screen-small-desktop-max,
  largeDesktop: $screen-large-desktop-max,
);

@mixin mediaMax($breakpoint-name) {
  @if map-has-key($grid-breakpoints-max, $breakpoint-name) {
    @media (max-width: #{map_get($grid-breakpoints-max, $breakpoint-name)}) {
      @content;
    }
  } @else {
    @error "breakpoint not supported!";
  }
}

@mixin add-theme-variable($variable-name, $value-map) {
  @each $theme, $value in $value-map {
    :root.#{$theme} {
      --#{$variable-name}: #{$value};
    }
  }
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;

      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }

      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin no-text-overflow {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

@mixin add-box-shadow {
  border: 1px solid #eaeaea;
  border-radius: 3px;
  box-shadow: 0 0 30px 0 rgba(85, 85, 85, 0.1);
}

@mixin basic-section-padding {
  padding-top: 40px;
  padding-bottom: 40px;

  // @media #{$medium-up} {
  @include mediaMin(tabletPortrait) {
    padding-top: 70px;
    padding-bottom: 70px;
  }
}

@mixin lazy-load-img {
  transition: opacity 0.1s ease-out;
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: auto;
  opacity: 0;

  &.fadeIn {
    opacity: 1;
  }
}

@mixin lazy-load-bg {
  transition: opacity 0.1s ease-out;
  position: relative;
  overflow: hidden;
  background-size: cover;
  background-color: palette-color('cool-grey-light');
  background-repeat: no-repeat;
  background-position: center center;
  opacity: 0.5;
  backface-visibility: hidden;

  &.fadeIn {
    opacity: 1;
  }
}

@mixin reset-form-element {
  appearance: none;
  -webkit-appearance: none;
  box-shadow: none;
  border-radius: 0;
  background: #fff;
}

@mixin clearfix {
  &:before,
  &:after {
    content: ' ';
    display: table;
  }

  &:after {
    display: block;
    clear: both;
    height: 1px;
    margin-top: -1px;
    visibility: hidden;
  }
  & {
    *zoom: 1;
  }
}
